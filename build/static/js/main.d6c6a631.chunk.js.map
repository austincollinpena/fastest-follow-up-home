{"version":3,"sources":["components/home/BlogList.js","components/home/HomePageContainer.js","components/shared-components/Nav.js","components/shared-components/EmailForm.js","components/shared-components/NumberForm.js","components/home/PreferTextEmail.js","components/shared-components/SuccessPopUp.js","components/home/AlertBox.js","components/blog/BlogPage.js","components/shared-components/Footer.js","components/helpers/ScrollToTop.js","App.js","serviceWorker.js","index.js","media/iphone.png","media/angled-decoration.svg","media/background-left.svg","media/exit-mark.svg"],"names":["GET_BLOGS","gql","BlogList","useQuery","onCompleted","data","dateSortedBlogs","edges","loading","error","className","map","item","index","key","node","id","slug","to","style","backgroundImage","backgroundLeft","backgroundRight","title","snippet","src","icon","HomePageContainer","children","Helmet","name","content","alt","iphone","Nav","handleInputClass","location","useLocation","pathname","href","onClick","ADD_EMAIL","EmailForm","isActive","showPopUp","showInputClass","useMutation","addEmail","initialValues","email","validate","values","errors","test","onSubmit","setSubmitting","JSON","stringify","variables","isSubmitting","component","placeholder","type","disabled","ADD_PHONE","NumberForm","addNumber","number","console","log","phone_number","PreferTextEmail","changeToNumber","changeToEmail","isChoice","SuccessPopUp","popUpActive","closePopUp","exit","AlertBox","useState","activeChoice","setActiveChoice","setpopUpActive","GET_BLOG","BlogPage","blog","useParams","titleTag","metaDescription","format","datePublished","dateUpdated","source","body","Footer","withRouter","history","useEffect","unlisten","listen","window","scrollTo","App","setShowInputClass","client","ApolloClient","uri","setTimeout","path","exact","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","rootElement","document","getElementById","hasChildNodes","hydrate","render","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.d6c6a631.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport ApolloClient from 'apollo-boost';\r\nimport { gql } from \"apollo-boost\";\r\nimport \"./blogs.scss\";\r\nimport {Link} from \"react-router-dom\"\r\nimport backgroundRight from \"../../media/angled-decoration.svg\";\r\nimport backgroundLeft from \"../../media/background-left.svg\";\r\n\r\n// // React Snap Needs To Prerender queries\r\n//\r\n// // Grab the state from a global variable injected into the server-generated HTML\r\n// const preloadedState = window.__APOLLO_STORE__;\r\n//\r\n// // Allow the passed state to be garbage-collected\r\n// delete window.__APOLLO_STORE__;\r\n//\r\n// const client = new ApolloClient({\r\n//   initialState: preloadedState,\r\n// });\r\n//\r\n// // Tell react-snap how to save state\r\n// window.snapSaveState = () => ({\r\n//   __APOLLO_STORE__: client.readQuery({\r\n//     GET_BLOGS, // you can pass any query you want to prerender here\r\n//   }),\r\n// });\r\n\r\nconst GET_BLOGS = gql`\r\n  {\r\n    dateSortedBlogs(orderBy: \"published_date\") {\r\n      edges {\r\n        node {\r\n          id\r\n          title\r\n          snippet\r\n          icon\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const BlogList = () => {\r\n  const { loading, error, data } = useQuery(GET_BLOGS, {\r\n    onCompleted: data => {\r\n      const dataToMap = data.dateSortedBlogs.edges;\r\n    }\r\n  });\r\n  if (loading) return <p>Loading.....</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  if (data)\r\n    return (\r\n      <div className=\"blogs\">\r\n        {data.dateSortedBlogs.edges.map((item, index) => (\r\n          <Link key={item.node.id} id={item.node.slug} to={`blog/${item.node.slug}`}>\r\n            <div\r\n              // style={{backgroundImage: 'url(' + backgroundLeft + ')'}}\r\n              style={\r\n                index % 2 === 0\r\n                  ? { backgroundImage: \"url(\" + backgroundLeft + \")\" }\r\n                  : { backgroundImage: \"url(\" + backgroundRight + \")\" }\r\n              }\r\n              className=\"blog-list-container center\"\r\n            >\r\n              <h3 className=\"secondary-title semi-bold \">{item.node.title}</h3>\r\n              <p className=\"body-text\">READ THIS BLOG IF</p>\r\n              <p className=\"subtitle semi-bold\">{item.node.snippet}</p>\r\n              <img src={item.node.icon} />\r\n              <p className=\"click-to-read body-text\">Click To Read</p>\r\n            </div>\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    );\r\n};\r\n\r\n// Get markdown--\r\n// {data.dateSortedBlogs.edges.map(item => <ReactMarkdown source={item.node.body} />)}\r\n// style={backgroundImage: {index % 2 === 0 ? `url(${backgroundRight})` : `url(${backgroundLeft})`}}\r\n","import React from \"react\";\r\nimport \"./HomePageContainer.scss\";\r\nimport iphone from \"../../media/iphone.png\";\r\nimport { BlogList } from \"./BlogList\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Helmet } from 'react-helmet';\r\n\r\nexport const HomePageContainer = ({ children }) => {\r\n  return (\r\n\r\n    <>\r\n      <Helmet>\r\n        <title>Close More Home Advisor Leads | Fastest Follow Up</title>\r\n        <meta name=\"description\" content=\"Beat your competitors to Home Advisor Leads With Auto Texts\"/>\r\n      </Helmet>\r\n      <main className=\"home-page-grid\">\r\n        <div className=\"gray-bar\" />\r\n        <img alt=\"An Iphone\" id=\"iphone\" src={iphone} />\r\n        <div className=\"dark-background\"><div/></div>\r\n        <div className=\"home-headercontent-container\">\r\n          <h1 id=\"sign-up\" className=\"massive-text semi-bold white\" >\r\n            You Can Close 35% More Home Advisor Leads, Easy\r\n          </h1>\r\n          <p className=\"subtitle white\">\r\n            Get to the leads first with automated texting. Close more, chase\r\n            less. Be the first to join by getting an automated alert for when\r\n            we launch.\r\n          </p>\r\n          {children}\r\n        </div>\r\n      </main>\r\n      <section>\r\n        <BlogList />\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nHomePageContainer.propTypes = {\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\n","import React from \"react\";\r\nimport \"./Nav.scss\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n\r\nexport const Nav = ({ handleInputClass }) => {\r\n  let location = useLocation();\r\n  // console.log(location[path]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className={`nav-container home-page-grid ${location.pathname !== \"/\" ? 'unset-height' : ''}`}>\r\n      <nav id='main-nav'\r\n           className={location.pathname !== \"/\" ? 'unset-clippath' : \"\"}>\r\n        {location.pathname === \"/\" ? (\r\n          <a\r\n              href='#sign-up'\r\n            className=\"subtitle white cta link\"\r\n              onClick={() => handleInputClass()}\r\n          >\r\n            Sign Up For Beta\r\n          </a>\r\n        ) : (\r\n          <Link\r\n            to=\"/\"\r\n            className=\"subtitle white cta link\"\r\n            onClick={() => handleInputClass()}\r\n          >\r\n            Sign Up For Beta\r\n          </Link>\r\n        )}\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nNav.propTypes = {\r\n  handleInputClass: PropTypes.func.isRequired\r\n};\r\n","import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport \"./SimpleFormSubmit.scss\";\r\nimport PropTypes from \"prop-types\";\r\nimport { gql } from 'apollo-boost';\r\nimport { useMutation} from \"@apollo/react-hooks\";\r\n\r\n\r\nconst ADD_EMAIL = gql`\r\n    mutation CreateLead($email: String!) {\r\n        createLead(input: {email: $email}) {\r\n            lead {\r\n                id\r\n                email\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const EmailForm = ({ isActive, showPopUp, showInputClass }) => {\r\n\r\n\r\n    const [addEmail, {data}] = useMutation(ADD_EMAIL);\r\n\r\n    return (\r\n\r\n        <Formik\r\n            // Set Initial Values\r\n            initialValues={{email: \"\"}}\r\n            // Validate Email\r\n            validate={values => {\r\n                const errors = {};\r\n                if (!values.email) {\r\n                    errors.email = \"Required\";\r\n                } else if (\r\n                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                ) {\r\n                    errors.email = \"Invalid email address\";\r\n                }\r\n                return errors;\r\n            }}\r\n            onSubmit={(values, {setSubmitting}) => {\r\n                JSON.stringify(values, null, 2);\r\n                addEmail({variables: {email: values.email}});\r\n                setSubmitting(false);\r\n                values.email=\"\";\r\n                showPopUp();\r\n            }}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form\r\n                    className={\"simple-form \" + (isActive ? \"\" : \"hidden\") + (showInputClass ? \" highlight-input\" : \"\")}>\r\n                    <div>\r\n                        <ErrorMessage className=\"error\" name=\"email\" component=\"div\"/>\r\n                    </div>\r\n                    <div className=\"inner-form\">\r\n                        <Field placeholder=\"ILuvLeads@gmail.com\" type=\"email\" name=\"email\"/>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Get Alerted\r\n                        </button>\r\n                    </div>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n\r\n}\r\n\r\nEmailForm.propTypes = {\r\n    isActive: PropTypes.bool.isRequired,\r\n    showPopUp: PropTypes.func.isRequired,\r\n    showInputClass: PropTypes.bool.isRequired\r\n};\r\n","import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport \"./SimpleFormSubmit.scss\";\r\nimport PropTypes from \"prop-types\";\r\nimport { gql } from \"apollo-boost\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\n\r\nconst ADD_PHONE = gql`\r\n  mutation CreateLead($phone_number: String!) {\r\n    createLead(input: { phoneNumber: $phone_number }) {\r\n      lead {\r\n        id\r\n        phoneNumber\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const NumberForm = ({ isActive, showPopUp, showInputClass}) => {\r\n  const [addNumber, { data }] = useMutation(ADD_PHONE);\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        // Set Initial Values\r\n        initialValues={{ number: \"\" }}\r\n        // Validate Email\r\n        validate={values => {\r\n          const errors = {};\r\n          if (!values.number) {\r\n            errors.number = \"Required\";\r\n          } else if (\r\n            !/^[+]?[(]?[0-9]{3}[)]?[-\\s.]?[0-9]{3}[-\\s.]?[0-9]{4,6}$/im.test(\r\n              values.number\r\n            )\r\n          ) {\r\n            errors.number = \"Invalid Phone Number\";\r\n          }\r\n          return errors;\r\n        }}\r\n        // TODO: Set error for 404\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          console.log(\"I ran\");\r\n          setSubmitting(false);\r\n            addNumber({ variables: { phone_number: `+1${values.number}` } });\r\n            values.number = \"\";\r\n            showPopUp();\r\n        }}\r\n\r\n      >\r\n\r\n        {({ isSubmitting }) => (\r\n          <Form\r\n            className={\r\n              \"simple-form \" +\r\n              (isActive ? \"\" : \"hidden\") +\r\n              (showInputClass ? \" highlight-input\" : \"\")\r\n            }\r\n          >\r\n            <div>\r\n              <ErrorMessage className=\"error\" name=\"number\" component=\"div\" />\r\n            </div>\r\n            <div className=\"inner-form\">\r\n                <Field placeholder=\"555-555-5555\" type=\"number\" name=\"number\" />\r\n              <button type=\"submit\" disabled={isSubmitting}>\r\n                Get Alerted\r\n              </button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nNumberForm.propTypes = {\r\n  isActive: PropTypes.bool.isRequired,\r\n  showPopUp: PropTypes.func.isRequired,\r\n  showInputClass: PropTypes.bool.isRequired\r\n};\r\n","import React from \"react\";\r\nimport \"./PreferTextEmail.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const PreferTextEmail = ({changeToNumber, changeToEmail, isChoice}) => {\r\n  return (\r\n    <div className=\"prefer-number-email\">\r\n      <p>I Prefer</p>\r\n      <div className=\"button-container\">\r\n        <button onClick={() => changeToEmail()}\r\n        className={isChoice === \"email\" ? \"active-choice\" : \"\"}\r\n        >Email\r\n        </button>\r\n        <button\r\n            className={isChoice === \"phone\" ? \"active-choice\" : \"\"}\r\n            onClick={() => changeToNumber()}>Texts</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nPreferTextEmail.propTypes = {\r\n    changeToNumber: PropTypes.func.isRequired,\r\n    changeToEmail: PropTypes.func.isRequired,\r\n    isChoice: PropTypes.string.isRequired\r\n};","import React from \"react\";\r\nimport \"./SuccessPopUp.scss\";\r\nimport PropTypes from 'prop-types';\r\nimport \"../global-styles.scss\";\r\nimport \"../copy.scss\";\r\nimport exit from \"../../media/exit-mark.svg\";\r\n\r\nexport const SuccessPopUp = ({popUpActive, closePopUp}) => {\r\n    return(\r\n        <div className={`success-pop-up ${popUpActive === true ? \"active-pop-up\" : \"\"}`}>\r\n            <img onClick={() => closePopUp()} id=\"exit-button\" src={exit}/>\r\n            <p id='title' className=\"secondary-title center bold\">Those Home Advisor Leads <span className=\"orange-highlight\">Won't Know What Hit Them</span></p>\r\n            <p className='body-text'>I’m working full time to get the service all set up. Your interest in the final product makes me ecstatic.</p><p className=\"body-text\"> I’ll be following up to get some feedback from you. If you want to help shape the future of this product, please be on the lookout.</p>\r\n            <p className='body-text'>Austin Pena | Founder</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nSuccessPopUp.propTypes = {\r\n    popUpActive: PropTypes.bool.isRequired,\r\n    closePopUp: PropTypes.func.isRequired,\r\n};","import React, { useState } from \"react\";\r\n\r\nimport { EmailForm } from \"../shared-components/EmailForm\";\r\nimport { NumberForm } from \"../shared-components/NumberForm\";\r\nimport \"./AlertBox.scss\";\r\nimport { PreferTextEmail } from \"./PreferTextEmail\";\r\nimport \"../global-styles.scss\";\r\nimport { SuccessPopUp } from \"../shared-components/SuccessPopUp\";\r\n\r\nexport const AlertBox = ({showInputClass}) => {\r\n  const [activeChoice, setActiveChoice] = useState(\"email\");\r\n  const [popUpActive, setpopUpActive] = useState(false);\r\n\r\n  const changeToNumber = () => {\r\n    setActiveChoice(\"phone\");\r\n  };\r\n\r\n  const changeToEmail = () => {\r\n    setActiveChoice(\"email\");\r\n  };\r\n\r\n  const showPopUp = () => {\r\n      setpopUpActive(true);\r\n  };\r\n\r\n  const closePopUp = () => {\r\n      setpopUpActive(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"email-number-container\">\r\n      <EmailForm isActive={activeChoice === \"email\" && true}  showPopUp={showPopUp} showInputClass={showInputClass}/>\r\n      <NumberForm isActive={activeChoice === \"phone\" && true} showPopUp={showPopUp} showInputClass={showInputClass}/>\r\n      <PreferTextEmail\r\n        changeToNumber={changeToNumber}\r\n        changeToEmail={changeToEmail}\r\n        isChoice={activeChoice}\r\n      />\r\n      <SuccessPopUp\r\n      popUpActive={popUpActive}\r\n      closePopUp={closePopUp}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport  { gql } from \"apollo-boost\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport \"./blogpage.scss\";\r\nimport \"./BlogCopy.scss\";\r\nimport \"../copy.scss\";\r\nimport Moment from \"react-moment\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\n// // React Snap Integration\r\n//\r\n// // Grab the state from a global variable injected into the server-generated HTML\r\n// const preloadedState = window.__APOLLO_STORE__;\r\n//\r\n// // Allow the passed state to be garbage-collected\r\n// delete window.__APOLLO_STORE__;\r\n//\r\n// const client = new ApolloClient({\r\n//   initialState: preloadedState,\r\n// });\r\n//\r\n// // Tell react-snap how to save state\r\n// window.snapSaveState = () => ({\r\n//   __APOLLO_STORE__: client.readQuery({\r\n//     GET_BLOG, // you can pass any query you want to prerender here\r\n//   }),\r\n// });\r\n\r\n// End integration\r\n\r\n\r\n\r\nconst GET_BLOG = gql`\r\n  query GetBlog($blog: String!) {\r\n    dateSortedBlogs(slug: $blog) {\r\n      edges {\r\n        node {\r\n          id\r\n          datePublished\r\n          body\r\n          title\r\n          dateUpdated\r\n          titleTag\r\n          metaDescription\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const BlogPage = () => {\r\n  let { blog } = useParams();\r\n  const { loading, error, data } = useQuery(GET_BLOG, {\r\n    variables: { blog },\r\n    onCompleted() {\r\n      console.log(data);\r\n    }\r\n  });\r\n  if (loading)\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <header>Loading...</header>\r\n        </Helmet>\r\n        <main>\r\n          <div id=\"blog-header-style\">\r\n            <div id=\"blog-header-clippath\" />\r\n          </div>\r\n          <div className=\"blog-title-container loading\"></div>\r\n          <div className=\"blog-container loading\"></div>\r\n        </main>\r\n      </>\r\n    );\r\n  if (error) return <p>Error :(, please text 541-601-5045!</p>;\r\n\r\n  if (data)\r\n    return (\r\n      <>\r\n          <Helmet>\r\n              <title>{data.dateSortedBlogs.edges[0].node.titleTag}</title>\r\n              <meta name=\"description\" content={data.dateSortedBlogs.edges[0].node.metaDescription}/>\r\n          </Helmet>\r\n        <main>\r\n          <div id=\"blog-header-style\">\r\n            <div id=\"blog-header-clippath\" />\r\n          </div>\r\n          <div className=\"blog-shadow-provider\">\r\n            <div className=\"blog-title-container\">\r\n              <h1 id=\"blog-title\" className=\"blog-title center white\">\r\n                {data.dateSortedBlogs.edges[0].node.title}\r\n              </h1>\r\n              <div className=\"date-container\">\r\n                <p className=\"bold body-text orange center\">\r\n                  Published:{\" \"}\r\n                  <Moment format={\"M/DD/YYYY\"}>\r\n                    {data.dateSortedBlogs.edges[0].node.datePublished}\r\n                  </Moment>\r\n                </p>\r\n                {data.dateSortedBlogs.edges[0].node.dateUpdated ? (\r\n                  <p className=\"bold body-text orange center\">\r\n                    Last Updated:{\" \"}\r\n                    <Moment format={\"M/DD/YYYY\"}>\r\n                      {data.dateSortedBlogs.edges[0].node.dateUpdated}\r\n                    </Moment>\r\n                  </p>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"blog-container\">\r\n            <div className=\"blog-content\">\r\n              <ReactMarkdown source={data.dateSortedBlogs.edges[0].node.body} />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport \"../copy.scss\";\r\nimport \"./Footer.scss\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const Footer = () => {\r\n    return(\r\n        <div className=\"footer\">\r\n            <p className=\"body-text white\">Fastest Follow Up is a Work In Progress. For any Questions, Email Austin at austin@fastestfollowup.com</p>\r\n            <p className=\"body-text orange\"><Link to=\"/\">Visit The Home Page</Link></p>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, Fragment } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ScrollToTop({ history, children }) {\r\n    useEffect(() => {\r\n        const unlisten = history.listen(() => {\r\n            window.scrollTo(0, 0);\r\n        });\r\n        return () => {\r\n            unlisten();\r\n        }\r\n    }, [history]);\r\n\r\n    return <Fragment>{children}</Fragment>;\r\n}\r\n\r\nexport default withRouter(ScrollToTop);\r\n\r\nScrollToTop.propTypes = {\r\n    history: PropTypes.object.isRequired,\r\n    children: PropTypes.element.isRequired,\r\n};","import React, { useState, useEffect } from \"react\";\nimport { HomePageContainer } from \"./components/home/HomePageContainer\";\nimport \"normalize.css\";\nimport \"./components/global-styles.scss\";\nimport { Nav } from \"./components/shared-components/Nav\";\nimport { AlertBox } from \"./components/home/AlertBox\";\nimport { BlogPage } from \"./components/blog/BlogPage\";\nimport { Footer } from \"./components/shared-components/Footer\";\nimport ScrollToTop from \"./components/helpers/ScrollToTop\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nfunction App() {\n  const [showInputClass, setShowInputClass] = useState(false);\n\n  const handleInputClass = () => {\n    setShowInputClass(true);\n  };\n\n  const client = new ApolloClient({\n    uri: \"https://backend.fastestfollowup.com/graphql/\"\n  });\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShowInputClass(false);\n    }, 5000);\n  }, [showInputClass]);\n\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <ApolloProvider client={client}>\n          <Nav handleInputClass={handleInputClass} />\n          <ScrollToTop>\n            <Switch>\n              <Route path=\"/blog/:blog\">\n                <BlogPage />\n              </Route>\n              <Route exact path=\"/\">\n                <HomePageContainer>\n                  <AlertBox showInputClass={showInputClass} />\n                </HomePageContainer>\n              </Route>\n            </Switch>\n          </ScrollToTop>\n          <Footer />\n        </ApolloProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from \"react-dom\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n    hydrate(<App />, rootElement);\n} else {\n    render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/iphone.ceeaa171.png\";","module.exports = __webpack_public_path__ + \"static/media/angled-decoration.e36600ac.svg\";","module.exports = __webpack_public_path__ + \"static/media/background-left.d23ddf01.svg\";","module.exports = __webpack_public_path__ + \"static/media/exit-mark.6b0e9c27.svg\";"],"sourceRoot":""}